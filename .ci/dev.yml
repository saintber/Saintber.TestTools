# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  tags:
    include:
      - v*-rc*
    exclude:
      - v*-dev*
      - v*-alpha*
      - v*-beta*

pool:
  vmImage: ubuntu-latest

variables:
  BuildConfiguration: 'Release'
  BuildProjects: '**/*.csproj'
  PushBranch: 'dev'

steps:
- checkout: self
  fetchTags: true

# 取得 Git 最新 Tag
- script: |
    echo "##[group]Fetching latest Git tag"
    TAG_FULL=$(git describe --tags --abbrev=0)
    echo "Git tag found: $TAG_NAME"
    TAG_NAME=$(echo "$TAG_FULL" | sed 's|.*/||')
    echo "Set version: $TAG_NAME"
    echo "##vso[task.setvariable variable=PACKAGE_VERSION]$TAG_NAME"
  displayName: "Extract Git Tag as Version"
  failOnStderr: true
  condition: succeeded()

# 安裝 .NET
- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '6.x'

- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '8.x'

- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '9.x'

# 設定 NuGet.exe 6.x 版本
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.x'

# 設定套件來源
- script: |
    nuget sources Add -Name "nuget.org" -Source "https://api.nuget.org/v3/index.json" -ConfigFile nuget.config
    if [ -n "$(PrivateSource)" ]; then
      echo "Adding Private NuGet source: $(PrivateSource)"
      nuget sources Add -Name "Private" -Source "$(PrivateSource)" -ConfigFile nuget.config
    fi
  displayName: 'Configure NuGet Sources'

# 設定 nuspec
- script: |
    echo "Updating nuspec files with version $(PACKAGE_VERSION)..."
    find . -type f -name "*.nuspec" -exec sed -i "s|<version>.*</version>|<version>$(PACKAGE_VERSION)</version>|g" {} +
  displayName: "Update nuspec version"

# 還原套件
- task: NuGetAuthenticate@1
  displayName: Authenticate to Azure Artifacts

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(BuildProjects)'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'

# 建置專案
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(BuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

# 建置套件
- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: 'src/*/*.nuspec'
    outputDir: '$(Build.ArtifactStagingDirectory)'

# 推送至 GitHub
# - script: |
    # echo "Configuring Git..."
    # git config --global user.email "$(GitHubUserMail)"
    # git config --global user.name "$(GitHubUserName)"
    # git fetch origin
    # git remote set-url origin https://$(GitHubToken)@github.com$(GitHubEndPoint)
    # echo "Pushing to $(PushBranch) branch..."
    # git push -u origin $(PushBranch)
  # displayName: "Push to GitHub $(PushBranch) branch"

# 推送套件
- task: NuGetCommand@2
  displayName: 'Push to Azure Artifact'
  condition: and(succeeded(), ne(variables['PrivateFeed'], ''))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: $(PrivateFeed)

- task: NuGetCommand@2
  displayName: 'Push to Nuget.Org'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: $(NugetOrgServiceConnectionToken)

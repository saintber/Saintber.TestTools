# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  BuildConfiguration: 'Release'
  BuildProjects: '**/*.csproj'
  TestProjects: '**/*[Uu]nit[Tt]ests/*.csproj'

steps:
- checkout: self

# 安裝 .NET
- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '6.x'

- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '8.x'

- task: UseDotNet@2
  displayName: "Install .NET Versions"
  inputs:
    version: '9.x'

# 設定 NuGet.exe 6.x 版本
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.x'

# 設定套件來源
- script: |
    nuget sources Add -Name "nuget.org" -Source "https://api.nuget.org/v3/index.json" -ConfigFile nuget.config
    if [ -n "$(PrivateSource)" ]; then
      echo "Adding Private NuGet source: $(PrivateSource)"
      nuget sources Add -Name "Private" -Source "$(PrivateSource)" -ConfigFile nuget.config
    fi
  displayName: 'Configure NuGet Sources'

# 還原套件
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(BuildProjects)'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'

# 建置專案
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(BuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

# 單元測試
- task: DotNetCoreCLI@2
  displayName: 'Run MSTest with XPlat Code Coverage'
  inputs:
    command: test
    projects: '$(TestProjects)'
    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code Coverage"'
    publishTestResults: true

# 推送測試報告
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(Build.ArtifactStagingDirectory)/coverage/html'
